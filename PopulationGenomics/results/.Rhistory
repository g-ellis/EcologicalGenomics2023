q3 <- read.table("allRS_poly.admix.3.Q", sep=" ", header=F)
K3=dim(q3)[2] #Find the level of K modeled
## order according to population code
ord<-order(pops[,2])
# make the plot:
barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
q <- read.table("allRS_poly.admix.2.Q", sep=" ", header=F)
K=dim(q)[2] #Find the level of K modeled
## order according to population code
ord<-order(pops[,2])
# make the plot:
barplot(t(q)[,ord],
col=cols[1:K],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
View(pops)
## order according to population code
ord<-order(pops[,2])
View(q)
View(q3)
View(q4)
K3=dim(q3)[3] #Find the level of K modeled
K3=dim(q3)[2] #Find the level of K modeled
# make the plot:
k3_plot <- barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
# make the plot:
k4_plot <- barplot(t(q4)[,ord],
col=cols[1:K4],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K4))
# make the plot:
k2_plot <- barplot(t(q)[,ord],
col=cols[1:K],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K))
combined_plot <- grid.arrange(k2_plot, k3_plot, k4_plot,
ncol = 1, heights = c(1, 1, 1.2))
library(ggplot2)
library(gridExtra)
combined_plot <- grid.arrange(k2_plot, k3_plot, k4_plot,
ncol = 1, heights = c(1, 1, 1.2))
k2_plot
k2_plot <- barplot(t(q)[,ord],
col=cols[1:K],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
k3_plot <- barplot(t(q3)[,ord],
col=cols[1:K3],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K3))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
k4_plot <- barplot(t(q4)[,ord],
col=cols[1:K4],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K4))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
PCA
plot(PCA$vectors[,1:2],
col=as.factor(pops[,2]),
xlab="PC1",ylab="PC2",
main="Genetic PCA")
PCA
coords <- read.csv("https://www.uvm.edu/~kellrlab/forClass/colebrookSampleMetaData.csv", header=T)
View(coords)
knitr::opts_chunk$set(echo = TRUE)
library(RcppCNPy) # for reading python numpy (.npy) files
# convert test statistic to p-value
pval_e1 <- as.data.frame(1-pchisq(e1_selectionstats,1))
e1_selectionstats<-npyLoad("eigen1.selection.npy")
# convert test statistic to p-value
pval_e1 <- as.data.frame(1-pchisq(e1_selectionstats,1))
names(pval_e1) = "p_PC1"
View(pval_e1)
## read positions
pos_e1 <- read.table("eigen1_allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
## read positions
pos_e1 <- read.table("eigen1_allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(pos_e1)
pos_e1_filtered = pos_e1[which(p$kept_sites==1),]x
pos_e1_filtered = pos_e1[which(p$kept_sites==1),]
dim(pos_e1_filtered)
## make manhattan plot
plot(-log10(pval_e1$p_PC1),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
## make manhattan plot
plot(-log10(pval_e1$p_PC1),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
View(pos_e1_filtered)
## make manhattan plot
plot<-plot(-log10(pval_e1$p_PC1),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
plot
plot(-log10(pval_e1$p_PC1[2e05:2.01e05]),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
manhattan_plot <- plot(-log10(pval_e1$p_PC1[2e05:2.01e05]),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
manhattan_plot
plot(-log10(pval_e1$p_PC1[2e05:2.01e05]),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
## make manhattan plot
plot(-log10(pval_e1$p_PC1),
col=pos_e1_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- pos_e1_filtered[which(pval==min(pval_e1$p_PC1)),c("chromo","position")]
sel_contig
View(pos_e1_filtered)
View(pval_e1)
# get the contig with the lowest p-value for selection
sel_contig <- pos_e1_filtered[which(pval_e1==min(pval_e1$p_PC1)),c("chromo","position")]
sel_contig
View(sel_contig)
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 500 probability
e1_outlier_contigs <- pos_e1_filtered[which(pval_e1$p_PC1<cutoff),c("chromo","position")]
View(e1_outlier_contigs)
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
# how many outlier loci < the cutoff? -> 675
dim(e1_outlier_contigs)[1]
# how many unique contigs harbor outlier loci? -> 478
length(unique(e1_outlier_contigs$chromo))
write.table(unique(e1_outlier_contigs$chromo), # this will be used for GEA later
"e1_allRS_poly_PC1_outlier_contigs.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
#get ggplot from library
library(ggplot2)
# Select your file
StreamRawData <- read.csv(file ="Stream_RawData_total_A01.csv")
library(RcppCNPy) # for reading python numpy (.npy) files
selectionstats<-npyLoad("allRS_poly.selection.npy")
pval <- as.data.frame(1-pchisq(selectionstats,1))
names(pval) = c("p_PC1", "p_PC2")
View(pval)
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
View(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
View(p_filtered)
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=2 (K3)")
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=2 (K3)")
plot(-log10(pval$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=2 (K3)")
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
cutoff=1e-3   # equals a 1 in 500 probability
outlier_contigs <- p_filtered[which(pval$p_PC1<cutoff),c("chromo","position")]
outlier_contigs_pc2 <- p_filtered[which(pval$p_PC2<cutoff),c("chromo","position")]
dim(outlier_contigs)[1]
dim(outlier_contigs_pc2)[1]
length(unique(outlier_contigs$chromo))
length(unique(outlier_contigs_pc2$chromo))
write.table(unique(outlier_contigs$chromo), # this will be used for GEA later
"allRS_poly_PC1_outlier_contigs.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
write.table(unique(outlier_contigs_pc2$chromo),
"allRS_poly_PC2_outlier_contigs.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
# selecting PC values that we'll be using as our covariates in the GEA
COV <- as.matrix(read.table("allRS_poly.cov"))
PCA <- eigen(COV)
View(PCA)
COV <- as.matrix(read.table("e2_allRS_poly.cov")) # read in the genetic covariance matrix
PCA <- eigen(COV) # extract the principal components from the COV matrix
## How much variance is explained by the first few PCs?
var <- round(PCA$values/sum(PCA$values),3)
var[1:3]
barplot(var,
xlab="Eigenvalues of the PCA",
ylab="Proportion of variance explained")
## Bring in the bam.list file and extract the sample info:
names <- read.table("allRS_bam.list")
names <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops) = c("Ind", "Pop", "Row", "Col")
plot(PCA$vectors[,1:2],
col=as.factor(pops[,2]),
xlab="PC1",ylab="PC2",
main="Genetic PCA")
data=as.data.frame(PCA$vectors)
data=data[,c(1:3)]
data= cbind(data, pops)
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
PCA <- ggscatter(data, x = "V1", y = "V2",
color = "Pop",
mean.point = FALSE,
star.plot = FALSE) +
theme_bw(base_size = 13, base_family = "Times") +
theme(panel.background = element_blank(),
legend.background = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text=element_text(size=rel(.7)),
axis.text = element_text(size=13),
legend.position = "bottom") +
labs(x = paste0("PC1: (",var[1]*100,"%)"), y = paste0("PC2: (",var[2]*100,"%)")) +
scale_color_manual(values=c(cols), name="Source population") +
guides(colour = guide_legend(nrow = 2))
library(ggplot2) # plotting
library(ggpubr) # plotting
data=as.data.frame(PCA$vectors)
data=data[,c(1:3)]
data= cbind(data, pops)
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
PCA <- ggscatter(data, x = "V1", y = "V2",
color = "Pop",
mean.point = FALSE,
star.plot = FALSE) +
theme_bw(base_size = 13, base_family = "Times") +
theme(panel.background = element_blank(),
legend.background = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text=element_text(size=rel(.7)),
axis.text = element_text(size=13),
legend.position = "bottom") +
labs(x = paste0("PC1: (",var[1]*100,"%)"), y = paste0("PC2: (",var[2]*100,"%)")) +
scale_color_manual(values=c(cols), name="Source population") +
guides(colour = guide_legend(nrow = 2))
PCA
View(COV)
e2_COV <- as.matrix(read.table("e2_allRS_poly.cov")) # read in the genetic covariance matrix
e2_PCA <- eigen(COV) # extract the principal components from the COV matrix
## How much variance is explained by the first few PCs?
var <- round(PCA$values/sum(PCA$values),3)
var[1:3]
## How much variance is explained by the first few PCs?
var <- round(PCA$values/sum(e2_PCA$values),3)
var[1:3]
e2_PCA <- eigen(e2_COV) # extract the principal components from the COV matrix
## How much variance is explained by the first few PCs?
var <- round(PCA$values/sum(e2_PCA$values),3)
var[1:3]
## How much variance is explained by the first few PCs?
var <- round(e2_PCA$values/sum(e2_PCA$values),3)
var[1:3]
PCA <- ggscatter(data, x = "V1", y = "V2",
color = "Pop",
mean.point = FALSE,
star.plot = FALSE) +
theme_bw(base_size = 13, base_family = "Times") +
theme(panel.background = element_blank(),
legend.background = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text=element_text(size=rel(.7)),
axis.text = element_text(size=13),
legend.position = "bottom") +
labs(x = paste0("PC1: (",var[1]*100,"%)"), y = paste0("PC2: (",var[2]*100,"%)"), title = "Red Spruce PCA (k=3)") +
scale_color_manual(values=c(cols), name="Source population") +
guides(colour = guide_legend(nrow = 2))
PCA
### selecting PC values that we'll be using as our covariates in the GEA ###
COV_e2 <- as.matrix(read.table("e2_allRS_poly.cov"))
PCA_e2 <- eigen(COV_e2)
data=as.data.frame(PCA_e2$vectors)
data=data[,c(1:2)] # the second number here is the number of PC axes you want to keep
View(data)
write.table(data,
"e2_allRS_poly_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
names <- read.table("e2_allRS_bam.list")
names <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam")) #removing path to just get sample ID
split = strsplit(names, "_")
pops <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops) = c("Ind", "Pop", "Row", "Col")
View(pops)
# merging coordinate data from meta-data df with our delimited "pops" df
angsd_coords <- merge(pops, coords, by.x="Ind", by.y="Tree")
points <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
#associate variables that correspond with our tree sample latitude-longitude points
clim <- extract(bio,points)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
library(raster) #spatial data package
library(FactoMineR) #PCA in R
library(factoextra) #PCA in R
library(corrplot) #plotting and data vis package
bio <- getData("worldclim",var="bio",res=10)
coords <- read.csv("https://www.uvm.edu/~kellrlab/forClass/colebrookSampleMetaData.csv", header=T)
#The chunk below refers to your bamlist file that you transferred during last week's PCA/admixture analysis. It should be the same one you want to use here -- if your sample list for analysis changes in the future, you'll need a different bamlist!
names <- read.table("e2_allRS_bam.list")
names <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam")) #removing path to just get sample ID
split = strsplit(names, "_")
pops <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops) = c("Ind", "Pop", "Row", "Col")
# merging coordinate data from meta-data df with our delimited "pops" df
angsd_coords <- merge(pops, coords, by.x="Ind", by.y="Tree")
points <- SpatialPoints(angsd_coords[c("Longitude","Latitude")])
#associate variables that correspond with our tree sample latitude-longitude points
clim <- extract(bio,points)
angsd_coords_clim <- cbind.data.frame(angsd_coords,clim)
str(angsd_coords_clim)
clim_PCA = PCA(angsd_coords_clim[,15:33], graph=T)
fviz_eig(clim_PCA)
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("darkgreen", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("darkorchid", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("darkorchid", "#E7B800", "gold"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("maroon1", "turquoise", "green"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("maroon1", "blue", "green"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("maroon1", "blue", "greenyellow"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
#FC4E07
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
# Which variables show the strongest correlation on the first 2 climate PC axes?
dimdesc(clim_PCA)[1:2]
write.table(scale(angsd_coords_clim["bio12"]),
"allRS_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio10"]),
"allRS_bio10.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio10"]),
"e2_allRS_bio10.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
write.table(scale(angsd_coords_clim["bio12"]),
"e2_allRS_bio12.txt",
sep="\t",
quote=F,
row.names = F,
col.names=F)
View(selectionstats)
View(selectionstats)
## read positions, associate P-values with SNP meta-data
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T) # this file was made using e=2
View(p)
fviz_pca_biplot(clim_PCA,
geom.ind="point", "text",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
?PCA
fviz_pca_biplot(clim_PCA,
geom.ind="point",
pointsize = 4
col.ind = angsd_coords_clim$Latitude,
fviz_pca_biplot(clim_PCA,
geom.ind="point",
addEllipses=TRUE, ellipse.level=0.95
col.ind = angsd_coords_clim$Latitude,
fviz_pca_biplot(clim_PCA,
geom.ind="point",
addEllipses=TRUE, ellipse.level=0.95,
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
fviz_pca_biplot(clim_PCA,
geom.ind="point",
col.ind = angsd_coords_clim$Latitude,
gradient.cols = c("#FC4E07", "#E7B800", "#00AFBB"),
title="Climate PCA (Bioclim)",
legend.title="Latitude")
library(ggplot)
library(ggplot2)
install.packages("DOSE")
install.packages("enrichplot")
library(DOSE)
library(DOSE)
library(enrichplot)
install.packages("doseplot")
av <- available.packages(filters=list())
av[av[, "Package"] == enrichplot, ]
av[av[, "enrichplot"] == enrichplot, ]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("enrichplot")
library(enrichplot)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("enrichplot")
library(enrichplot)
